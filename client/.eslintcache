[{"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\index.js":"1","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\App.js":"2","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\reportWebVitals.js":"3","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\store.js":"4","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\containers\\LoadedApp.js":"5","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\Wait.js":"6","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\Login.js":"7","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\MyInfo.js":"8","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\constants.js":"9","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\LoginList.js":"10","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\LoginInfo.js":"11"},{"size":543,"mtime":1611147352863,"results":"12","hashOfConfig":"13"},{"size":790,"mtime":1611152635636,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":7012,"mtime":1612030558622,"results":"16","hashOfConfig":"13"},{"size":758,"mtime":1612025381557,"results":"17","hashOfConfig":"13"},{"size":117,"mtime":1611146629060,"results":"18","hashOfConfig":"13"},{"size":1038,"mtime":1612022289022,"results":"19","hashOfConfig":"13"},{"size":553,"mtime":1612027019778,"results":"20","hashOfConfig":"13"},{"size":161,"mtime":1612025185374,"results":"21","hashOfConfig":"13"},{"size":509,"mtime":1612030911771,"results":"22","hashOfConfig":"13"},{"size":779,"mtime":1612028858233,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1qlouws",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\index.js",[],["48","49"],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\App.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\reportWebVitals.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\store.js",["50"],"import { types, flow, onSnapshot, applySnapshot, getSnapshot } from 'mobx-state-tree';\r\nimport { values } from 'mobx';\r\nimport _ from 'lodash';\r\nimport axios from 'axios';\r\n\r\nconst defaultSnapshot = {\r\n  token: '',\r\n  myInnerInfo: {},\r\n  myDisplayInfo: {},\r\n  loginInfo: {},\r\n  loginList: [],\r\n  loading: false,\r\n  logined: false,\r\n}\r\n\r\nconst User = types\r\n  .model({\r\n    login: '',\r\n    type: '',\r\n  }).actions(self => ({\r\n    setUserInfo({ login, type }) {\r\n      self.login = login;\r\n      self.type = type;\r\n    }\r\n  }))\r\n\r\nconst RootStore = types\r\n  .model({\r\n    token: '',\r\n    myInnerInfo: types.optional(User, {}), // User and types.compose(User) also did not help\r\n    myDisplayInfo: types.optional(User, {}), // User and types.compose(User) also did not help\r\n    loginInfo: types.optional(User, {}), // User and types.compose(User) also did not help\r\n    loginList: types.array(types.string),\r\n    loading: false,\r\n    logined: false,\r\n  }).views(self => ({\r\n    get loginListLength() {\r\n      return values(self.loginList).length;\r\n    },\r\n  })).actions(self => ({\r\n    // setToken (token) {\r\n    //   self.token = token;\r\n    // },\r\n    // setMyInnerInfo (userInfo) {\r\n    //   self.myInnerInfo.setUserInfo(userInfo);\r\n    // },\r\n    // setMyDisplayInfo (userInfo) {\r\n    //   self.myDisplayInfo.setUserInfo(userInfo);\r\n    // },\r\n    // setLoginInfo (userInfo) {\r\n    //   self.loginInfo.setUserInfo(userInfo);\r\n    // },\r\n    // setLoginList (loginList) {\r\n    //   self.loginList = loginList;\r\n    // },\r\n    // setLoading (loading) {\r\n    //   self.loading = loading;\r\n    // },\r\n    // setLogined (logined) {\r\n    //   self.logined = logined;\r\n    // },\r\n    // reset() {\r\n    //   self.token = '';\r\n    //   self.myInnerInfo = User.create({});\r\n    //   self.myDisplayInfo = User.create({});\r\n    //   self.loginInfo = User.create({});\r\n    //   self.loginList = [];\r\n    //   self.loading = false;\r\n    //   self.logined = false;\r\n    // },\r\n    register: flow(function* register(login, password) {\r\n      self.loading = true;\r\n      try {\r\n        const res = yield axios({\r\n          method: 'POST',\r\n          url: `${process.env.REACT_APP_HOST}/users/register`,\r\n          data: { login, password },\r\n        });\r\n        alert('Registered');\r\n        self.loading=false;\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert(`Error registering! Please retry!`);\r\n        resetStore();\r\n      }\r\n    }),\r\n    login: flow(function* login(login, password) {\r\n      self.loading = true;\r\n      try {\r\n        const res = yield axios({\r\n          method: 'POST',\r\n          url: `${process.env.REACT_APP_HOST}/users/login`,\r\n          data: { login, password },\r\n        });\r\n        self.token = res.data.token;\r\n        self.myInnerInfo.setUserInfo(res.data.user);\r\n        self.myDisplayInfo.setUserInfo({ login: '', type: '' });\r\n        self.loginInfo.setUserInfo({ login: '', type: '' });\r\n        self.loginList = [];\r\n        alert('Logined');\r\n        self.logined = true;\r\n        self.loading=false;\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert(`Error logining! Please retry!`);\r\n        resetStore();\r\n      }\r\n    }),\r\n    unlogin() {\r\n      self.loading = true;\r\n      self.logined = false;\r\n      self.token = '';\r\n      self.myInnerInfo.setUserInfo({ login: '', type: '' });\r\n      self.myDisplayInfo.setUserInfo({ login: '', type: '' });\r\n      self.loginInfo.setUserInfo({ login: '', type: '' });\r\n      self.loginList = [];\r\n      alert('Unlogined');\r\n      self.loading=false;\r\n    },\r\n    getMyInfo: flow(function* getMyInfo() {\r\n      self.loading = true;\r\n      try {\r\n        const res = yield axios({\r\n          method: 'GET',\r\n          url: `${process.env.REACT_APP_HOST}/users/my-info`,\r\n          headers: {'Authorization': self.token ? `Bearer ${self.token}` : ''},\r\n        });\r\n        // self.token = res.data.token;\r\n        // self.myInnerInfo.setUserInfo(res.data.user);\r\n        self.myDisplayInfo.setUserInfo(res.data);\r\n        // self.loginInfo.setUserInfo({});\r\n        // self.loginList = [];\r\n        alert('Loaded information');\r\n        // self.logined = true;\r\n        self.loading=false;\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert(`Error loading information! Please retry!`);\r\n        resetStore();\r\n      }\r\n    }),\r\n    getLoginList: flow(function* getLoginList() {\r\n      self.loading = true;\r\n      try {\r\n        const res = yield axios({\r\n          method: 'GET',\r\n          url: `${process.env.REACT_APP_HOST}/users/list-logins`,\r\n          headers: {'Authorization': self.token ? `Bearer ${self.token}` : ''},\r\n        });\r\n        // self.token = res.data.token;\r\n        // self.myInnerInfo.setUserInfo(res.data.user);\r\n        // self.myDisplayInfo.setUserInfo(res.data);\r\n        // self.loginInfo.setUserInfo({});\r\n        self.loginList = res.data;\r\n        alert('Loaded list');\r\n        // self.logined = true;\r\n        self.loading=false;\r\n      } catch (e) {\r\n        console.error(e);\r\n        alert(`Error loading list! Please retry!`);\r\n        resetStore();\r\n      }\r\n    }),\r\n    getLoginInfo: flow(function* getLoginInfo(login) {\r\n      self.loading = true;\r\n      try {\r\n        const res = yield axios({\r\n          method: 'GET',\r\n          url: `${process.env.REACT_APP_HOST}/users/user-info/${login}`,\r\n          headers: {'Authorization': self.token ? `Bearer ${self.token}` : ''},\r\n        });\r\n        // self.token = res.data.token;\r\n        // self.myInnerInfo.setUserInfo(res.data.user);\r\n        // self.myDisplayInfo.setUserInfo(res.data);\r\n        self.loginInfo.setUserInfo(res.data);\r\n        // self.loginList = [];\r\n        alert('Loaded information');\r\n        // self.logined = true;\r\n        self.loading=false;\r\n      } catch (e) {\r\n        console.error(e);\r\n        // console.log(e.response);\r\n        if (_.get(e, 'response.status') === 404) {\r\n          alert('Error! Seems login not found! Try again!');\r\n          self.loginInfo.setUserInfo({ login: '', type: '' });\r\n          self.loading=false;\r\n        } else {\r\n          alert(`Error loading information! Please retry!`);\r\n          resetStore();\r\n        }\r\n      }\r\n    }),\r\n  }));\r\n\r\nconst store = RootStore.create();\r\n\r\nif(!(localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY] && JSON.parse(localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY]))) {\r\n  localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY] = JSON.stringify(defaultSnapshot);\r\n}\r\napplySnapshot(store, JSON.parse( localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY] /* defaultSnapshot */));\r\n\r\nconsole.log(getSnapshot(store));\r\n\r\nonSnapshot(store, snapshot => {\r\n  localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY] = JSON.stringify(snapshot);\r\n  console.info(snapshot);\r\n});\r\n\r\nexport default store;\r\nexport function resetStore() {\r\n  localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY] = JSON.stringify(defaultSnapshot);\r\n  applySnapshot(store, JSON.parse(localStorage[process.env.REACT_APP_LOCALSTORAGE_KEY]));\r\n}","C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\containers\\LoadedApp.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\Wait.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\Login.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\MyInfo.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\constants.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\LoginList.js",[],"C:\\Users\\bpali\\Desktop\\authorization1\\client\\src\\components\\LoginInfo.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":74,"column":15,"nodeType":"57","messageId":"58","endLine":74,"endColumn":18},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]